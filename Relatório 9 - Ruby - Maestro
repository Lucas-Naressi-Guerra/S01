# Classe base Musico (abstrata)
class Musico
  attr_reader :nome, :instrumento

  def initialize(nome, instrumento)
    @nome = nome
    @instrumento = instrumento
  end

  # Método abstrato — deve ser sobrescrito nas subclasses
  def tocar_partitura(peca)
    raise NotImplementedError, "O método tocar_partitura deve ser implementado nas subclasses!"
  end
end

# Subclasse Pianista
class Pianista < Musico
  def initialize(nome)
    super(nome, "Piano")
  end

  def tocar_partitura(peca)
    puts "#{@nome} toca a peça '#{peca}' no piano."
  end
end

# Subclasse Violinista
class Violinista < Musico
  def initialize(nome)
    super(nome, "Violino")
  end

  def tocar_partitura(peca)
    puts "#{@nome} executa '#{peca}' no violino."
  end
end

# Classe Maestro
class Maestro
  def initialize(nome, musicos)
    @nome = nome
    @musicos = musicos
  end

  # Método para iniciar o ensaio
  def iniciar_ensaio(peca)
    puts "\n Maestro #{@nome} inicia o ensaio da peça '#{peca}'..."
    @musicos.each { |m| m.tocar_partitura(peca) }
  end

  # Método para mudar o foco dos músicos
  def mudar_foco(estado)
    puts "\n Mudando foco dos músicos para o estado: #{estado}"
    mensagens = @musicos.map do |m|
      "#{m.nome} agora está #{estado}!"
    end
    mensagens.each { |msg| puts msg }
  end
end

puts "=== Orquestra Sinfônica ==="
print "Digite o nome da peça a ser tocada: "
peca = gets.chomp

# Criação de músicos
m1 = Pianista.new("Kousei")
m2 = Violinista.new("Kaori")

# Criação do maestro e adição dos músicos
maestro = Maestro.new("Taki-sensei", [m1, m2])

# Execução do ensaio
maestro.mudar_foco("Concentrado")
maestro.iniciar_ensaio(peca)
