#include <iostream>
using namespace std;

// Classe base
class Pessoa {
protected:
    string nome;

public:
    void setNome(string n) {
        nome = n;
    }

    virtual void apresentar() {
        cout << "Olá, meu nome é " << nome << " e eu sou uma pessoa." << endl;
    }
};

// Classe derivada: Professor
class Professor : public Pessoa {
private:
    string disciplina;

public:
    void setDisciplina(string d) {
        disciplina = d;
    }

    void apresentar()  {
        cout << "Olá, meu nome é " << nome << " e eu sou um professor de " << disciplina << "." << endl;
    }
};

// Classe derivada: Aluno
class Aluno : public Pessoa {
private:
    string curso;
    int matricula;

public:
    void setCurso(string c) {
        curso = c;
    }

    void setMatricula(int m) {
        matricula = m;
    }

    void apresentar()  {
        cout << "Olá, meu nome é " << nome << " e eu sou um aluno de " << curso << "." << endl;
    }
};

int main() {
    setlocale(LC_ALL, "portuguese");
    Professor prof;
    Aluno aluno;

    // Entrada de dados
    string nome, disciplina, curso;
    int matricula;

    cout << "=== Cadastro do Professor ===\n";
    cout << "Nome: ";
    getline(cin, nome);
    prof.setNome(nome);
    cout << "Disciplina: ";
    getline(cin, disciplina);
    prof.setDisciplina(disciplina);

    cout << "\n=== Cadastro do Aluno ===\n";
    cout << "Nome: ";
    getline(cin, nome);
    aluno.setNome(nome);
    cout << "Curso: ";
    getline(cin, curso);
    aluno.setCurso(curso);
    cout << "Matrícula: ";
    cin >> matricula;
    aluno.setMatricula(matricula);

    // Polimorfismo com ponteiros da classe base
    Pessoa* comunidade[2];
    comunidade[0] = &prof;
    comunidade[1] = &aluno;

    cout << "\n=== Apresentações ===\n";
    for (int i = 0; i < 2; i++) {
        comunidade[i]->apresentar(); 
    }

    return 0;
}
